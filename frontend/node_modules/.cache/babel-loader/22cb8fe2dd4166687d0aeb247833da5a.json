{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marcyiu\\\\PycharmProjects\\\\iot\\\\frontend\\\\my-app\\\\src\\\\Pages\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n\n  ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      }\n    }\n  }; // const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n  // const data = {\n  //   labels,\n  //   datasets: [\n  //     {\n  //       label: 'Dataset 1',\n  //       data: [12, 21,31, 23, 16, 18,20],\n  //       borderColor: 'rgb(255, 99, 132)',\n  //       backgroundColor: 'rgba(255, 99, 132, 0.5)',\n  //     },\n  //     {\n  //       label: 'Dataset 2',\n  //       data: [21, 21, 20, 30, 25, 18],\n  //       borderColor: 'rgb(53, 162, 235)',\n  //       backgroundColor: 'rgba(53, 162, 235, 0.5)',\n  //     },\n  //   ],\n  // };\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [labels, setLabels] = useState([]);\n  const [data, setData] = useState([[], []]);\n\n  const getTelemetry = () => {\n    const options = {\n      method: \"GET\",\n      url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry`,\n      withCredentials: true\n    };\n    axios(options).then(r => {\n      setLabels(r.data.data.map(x => x.ts));\n      let temp = r.data.data.map(x => x.telemetry.temp);\n      let hum = r.data.data.map(x => x.telemetry.hum);\n      setData([temp, hum]);\n      console.log(data);\n    });\n  };\n\n  useEffect(() => getTelemetry(), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [searchParams.get(\"id\"), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getTelemetry,\n      children: \"22222\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"9A+l1nbddSOZklLfGt2lDEuJONs=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/marcyiu/PycharmProjects/iot/frontend/my-app/src/Pages/Dashboard.js"],"names":["React","useEffect","useState","useSearchParams","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","axios","Dashboard","register","options","responsive","plugins","legend","position","title","display","text","searchParams","setSearchParams","labels","setLabels","data","setData","getTelemetry","method","url","get","withCredentials","then","r","map","x","ts","temp","telemetry","hum","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SACEC,KAAK,IAAIC,OADX,EAEEC,aAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,KANF,EAOEC,OAPF,EAQEC,MARF,QASO,UATP;AAUA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3BV,EAAAA,OAAO,CAACW,QAAR,CACIV,aADJ,EAEIC,WAFJ,EAGIC,YAHJ,EAIIC,WAJJ,EAKIC,KALJ,EAMIC,OANJ,EAOIC,MAPJ;AAUA,QAAMK,OAAO,GAAG;AACZC,IAAAA,UAAU,EAAE,IADA;AAEZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ,OADD;AAIPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,IAAI,EAAE;AAFD;AAJA;AAFG,GAAhB,CAX2B,CAwB3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCvB,eAAe,EAAvD;AACA,QAAM,CAACwB,MAAD,EAASC,SAAT,IAAsB1B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAAC2B,IAAD,EAAOC,OAAP,IAAkB5B,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAAhC;;AAGA,QAAM6B,YAAY,GAAG,MAAM;AACvB,UAAMd,OAAO,GAAG;AACZe,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,GAAG,EAAG,uCAAsCR,YAAY,CAACS,GAAb,CAAiB,IAAjB,CAAuB,YAFvD;AAGZC,MAAAA,eAAe,EAAE;AAHL,KAAhB;AAKArB,IAAAA,KAAK,CAACG,OAAD,CAAL,CACCmB,IADD,CACMC,CAAC,IAAI;AACPT,MAAAA,SAAS,CAACS,CAAC,CAACR,IAAF,CAAOA,IAAP,CAAYS,GAAZ,CAAgBC,CAAC,IAAIA,CAAC,CAACC,EAAvB,CAAD,CAAT;AACA,UAAIC,IAAI,GAAGJ,CAAC,CAACR,IAAF,CAAOA,IAAP,CAAYS,GAAZ,CAAgBC,CAAC,IAAIA,CAAC,CAACG,SAAF,CAAYD,IAAjC,CAAX;AACA,UAAIE,GAAG,GAAGN,CAAC,CAACR,IAAF,CAAOA,IAAP,CAAYS,GAAZ,CAAgBC,CAAC,IAAIA,CAAC,CAACG,SAAF,CAAYC,GAAjC,CAAV;AACAb,MAAAA,OAAO,CAAC,CAACW,IAAD,EAAOE,GAAP,CAAD,CAAP;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACH,KAPD;AAQH,GAdD;;AAgBA5B,EAAAA,SAAS,CAAC,MAAM8B,YAAY,EAAnB,EAAuB,EAAvB,CAAT;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,eACKN,YAAY,CAACS,GAAb,CAAiB,IAAjB,CADL,eAEI;AAAQ,MAAA,OAAO,EAAEH,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA1EM;;GAAMhB,S;UA4C+BZ,e;;;KA5C/BY,S","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n  \r\nexport const Dashboard = () => {\r\n    ChartJS.register(\r\n        CategoryScale,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend\r\n    );\r\n    \r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Chart.js Line Chart',\r\n          },\r\n        },\r\n    };\r\n    \r\n    // const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n    \r\n    // const data = {\r\n    //   labels,\r\n    //   datasets: [\r\n    //     {\r\n    //       label: 'Dataset 1',\r\n    //       data: [12, 21,31, 23, 16, 18,20],\r\n    //       borderColor: 'rgb(255, 99, 132)',\r\n    //       backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n    //     },\r\n    //     {\r\n    //       label: 'Dataset 2',\r\n    //       data: [21, 21, 20, 30, 25, 18],\r\n    //       borderColor: 'rgb(53, 162, 235)',\r\n    //       backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n    //     },\r\n    //   ],\r\n    // };\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const [labels, setLabels] = useState([]);\r\n    const [data, setData] = useState([[], []]);\r\n\r\n\r\n    const getTelemetry = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry`,\r\n            withCredentials: true\r\n        }\r\n        axios(options)\r\n        .then(r => {\r\n            setLabels(r.data.data.map(x => x.ts));\r\n            let temp = r.data.data.map(x => x.telemetry.temp);\r\n            let hum = r.data.data.map(x => x.telemetry.hum);\r\n            setData([temp, hum])\r\n            console.log(data);\r\n        })\r\n    }\r\n\r\n    useEffect(() => getTelemetry(), [])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {searchParams.get(\"id\")}\r\n            <button onClick={getTelemetry}>22222</button>\r\n            {/* <Line options={options} data={data} /> */}\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}