{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marcyiu\\\\PycharmProjects\\\\iot\\\\frontend\\\\my-app\\\\src\\\\Pages\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n\n  ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [labels, setLabels] = useState([]);\n  const [data, setData] = useState([[], []]);\n\n  const getTelemetry = () => {\n    const options = {\n      method: \"GET\",\n      url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?sort=1`,\n      withCredentials: true\n    };\n    axios(options).then(r => {\n      setLabels(r.data.data.map(x => new Date(x.ts).toLocaleTimeString()));\n      let temp = r.data.data.map(x => x.telemetry.temp);\n      let hum = r.data.data.map(x => x.telemetry.hum);\n      setData([temp, hum]);\n    });\n  };\n\n  useEffect(() => {\n    getTelemetry();\n    const intervalId = setInterval(() => getTelemetry(), 3000);\n    return () => clearInterval(intervalId);\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      }\n    },\n    scales: {\n      y: {\n        grid: {\n          color: 'black'\n        }\n      },\n      x: {\n        grid: {\n          color: 'black'\n        }\n      }\n    }\n  };\n  const dataToPlot = {\n    labels,\n    datasets: [{\n      label: 'Temperature',\n      data: data[0],\n      borderColor: '#ED1233',\n      backgroundColor: '#FFFFFF',\n      lineTension: 0.3\n    }, {\n      label: 'Humidity',\n      data: data[1],\n      borderColor: '#0218FD',\n      backgroundColor: '#FFFFFF',\n      lineTension: 0.3\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [searchParams.get(\"id\"), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getTelemetry,\n      children: \"22222\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: dataToPlot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"9A+l1nbddSOZklLfGt2lDEuJONs=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/marcyiu/PycharmProjects/iot/frontend/my-app/src/Pages/Dashboard.js"],"names":["React","useEffect","useState","useSearchParams","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","axios","Dashboard","register","searchParams","setSearchParams","labels","setLabels","data","setData","getTelemetry","options","method","url","get","withCredentials","then","r","map","x","Date","ts","toLocaleTimeString","temp","telemetry","hum","intervalId","setInterval","clearInterval","responsive","plugins","legend","position","title","display","text","scales","y","grid","color","dataToPlot","datasets","label","borderColor","backgroundColor","lineTension"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport './Dashboard.css'\r\n  \r\nexport const Dashboard = () => {\r\n    ChartJS.register(\r\n        CategoryScale,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend\r\n    );\r\n       \r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const [labels, setLabels] = useState([]);\r\n    const [data, setData] = useState([[], []]);\r\n\r\n\r\n    const getTelemetry = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?sort=1`,\r\n            withCredentials: true\r\n        }\r\n        axios(options)\r\n        .then(r => {\r\n            setLabels(r.data.data.map(x => new Date(x.ts).toLocaleTimeString()));\r\n            let temp = r.data.data.map(x => x.telemetry.temp);\r\n            let hum = r.data.data.map(x => x.telemetry.hum);\r\n            setData([temp, hum]);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTelemetry();\r\n        const intervalId = setInterval(() => getTelemetry(), 3000);\r\n        return () => clearInterval(intervalId)\r\n    }, [])\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Chart.js Line Chart',\r\n          },\r\n        },\r\n        scales: {\r\n            y: {\r\n              grid: {\r\n                color: 'black'\r\n              }\r\n            },\r\n            x: {\r\n              grid: {\r\n                color: 'black'\r\n              }\r\n            }\r\n        }\r\n  \r\n    };\r\n\r\n    const dataToPlot = {\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: 'Temperature',\r\n            data: data[0],\r\n            borderColor: '#ED1233',\r\n            backgroundColor: '#FFFFFF',\r\n            lineTension: 0.3\r\n          },\r\n          {\r\n            label: 'Humidity',\r\n            data: data[1],\r\n            borderColor: '#0218FD',\r\n            backgroundColor: '#FFFFFF',\r\n            lineTension: 0.3\r\n          },\r\n        ],\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {searchParams.get(\"id\")}\r\n            <button onClick={getTelemetry}>22222</button>\r\n            <Line options={options} data={dataToPlot} />\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}