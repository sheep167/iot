{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marcyiu\\\\PycharmProjects\\\\iot\\\\frontend\\\\my-app\\\\src\\\\Pages\\\\Private\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale, TimeSeriesScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport \"chartjs-adapter-moment\";\nimport axios from 'axios';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n\n  ChartJS.register(CategoryScale, TimeScale, TimeSeriesScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n  const [searchParams] = useSearchParams();\n  const [data, setData] = useState([[], []]);\n\n  const getTelemetry = () => {\n    const options = {\n      method: \"GET\",\n      url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?sort=1`,\n      withCredentials: true\n    };\n    axios(options).then(r => {\n      let temp = r.data.data.map(x => ({\n        'x': x.ts,\n        'y': x.telemetry.temp\n      }));\n      let hum = r.data.data.map(x => ({\n        'x': x.ts,\n        'y': x.telemetry.hum\n      }));\n      setData([temp, hum]);\n    });\n  };\n\n  useEffect(() => {\n    getTelemetry();\n    const intervalId = setInterval(() => getTelemetry(), 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Temp and Hum',\n        color: '#000000',\n        font: {\n          size: 30\n        }\n      }\n    },\n    scales: {\n      y: {\n        grid: {\n          color: '#A7ADAF'\n        },\n        ticks: {\n          color: '#00000'\n        }\n      },\n      x: {\n        grid: {\n          color: '#A7ADAF'\n        },\n        ticks: {\n          color: '#00000'\n        },\n        type: 'time',\n        time: {\n          unit: 'second',\n          stepSize: 30\n        },\n        min: Date.now() - 5 * 60 * 1000\n      }\n    }\n  };\n  const dataToPlot = {\n    datasets: [{\n      label: 'Temperature',\n      data: data[0],\n      borderColor: '#ED1233',\n      backgroundColor: '#ED1233',\n      lineTension: 0.3,\n      pointRadius: 5,\n      pointHoverRadius: 10\n    }, {\n      label: 'Humidity',\n      data: data[1],\n      borderColor: '#0218FD',\n      backgroundColor: '#0218FD',\n      lineTension: 0.3,\n      pointRadius: 5,\n      pointHoverRadius: 10\n    }]\n  };\n\n  const oneRandomData = () => {\n    const options = {\n      method: \"POST\",\n      url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?random=1`,\n      withCredentials: true\n    };\n    axios(options);\n  };\n\n  const [isClicked] = useState(false);\n  const [intervalId] = useState();\n  useEffect(() => {\n    if (isClicked) {\n      const intervalId = setInterval(() => oneRandomData(), 1000);\n    }\n\n    return () => clearInterval(intervalId);\n  }); // const postRandomData = () => {\n  //     oneRandomData();\n  //     setInterval(oneRandomData, 5000);\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn random-btn\",\n      onClick: postRandomData,\n      children: \"Random Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: dataToPlot\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"L2+rZTQqYJa/UQMfmhIeKg5VpyU=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/marcyiu/PycharmProjects/iot/frontend/my-app/src/Pages/Private/Dashboard.js"],"names":["React","useEffect","useState","useSearchParams","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","TimeSeriesScale","Line","axios","Dashboard","register","searchParams","data","setData","getTelemetry","options","method","url","get","withCredentials","then","r","temp","map","x","ts","telemetry","hum","intervalId","setInterval","clearInterval","responsive","plugins","legend","position","title","display","text","color","font","size","scales","y","grid","ticks","type","time","unit","stepSize","min","Date","now","dataToPlot","datasets","label","borderColor","backgroundColor","lineTension","pointRadius","pointHoverRadius","oneRandomData","isClicked","postRandomData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    TimeScale,\r\n    TimeSeriesScale,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport \"chartjs-adapter-moment\";\r\nimport axios from 'axios';\r\nimport './Dashboard.css'\r\n  \r\nexport const Dashboard = () => {\r\n    ChartJS.register(\r\n        CategoryScale,\r\n        TimeScale,\r\n        TimeSeriesScale,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend\r\n    );\r\n       \r\n\r\n    const [searchParams] = useSearchParams();\r\n    const [data, setData] = useState([[], []]);\r\n\r\n\r\n    const getTelemetry = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?sort=1`,\r\n            withCredentials: true\r\n        }\r\n        axios(options)\r\n        .then(r => {\r\n            let temp = r.data.data.map(x => ({ 'x': x.ts, 'y': x.telemetry.temp }));\r\n            let hum = r.data.data.map(x => ({ 'x': x.ts, 'y': x.telemetry.hum }));\r\n            setData([temp, hum]);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTelemetry();\r\n        const intervalId = setInterval(() => getTelemetry(), 1000);\r\n        return () => clearInterval(intervalId)\r\n    }, [])\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Temp and Hum',\r\n                color: '#000000',\r\n                font: {\r\n                    size: 30\r\n                }\r\n            },\r\n        },\r\n        scales: {\r\n            y: {\r\n                grid: {\r\n                    color: '#A7ADAF'\r\n                },\r\n                ticks: {\r\n                    color: '#00000'\r\n                }\r\n            },\r\n            x: {\r\n                grid: {\r\n                    color: '#A7ADAF'\r\n                },\r\n                ticks: {\r\n                    color: '#00000'\r\n                },\r\n                type: 'time',\r\n                time: {\r\n                    unit: 'second',\r\n                    stepSize: 30,\r\n                },\r\n                min: Date.now() - 5 * 60 * 1000\r\n            }\r\n        }\r\n  \r\n    };\r\n\r\n    const dataToPlot = {\r\n        datasets: [\r\n            {\r\n                label: 'Temperature',\r\n                data: data[0],\r\n                borderColor: '#ED1233',\r\n                backgroundColor: '#ED1233',\r\n                lineTension: 0.3,\r\n                pointRadius: 5,\r\n                pointHoverRadius: 10\r\n            },\r\n            {\r\n                label: 'Humidity',\r\n                data: data[1],\r\n                borderColor: '#0218FD',\r\n                backgroundColor: '#0218FD',\r\n                lineTension: 0.3,\r\n                pointRadius: 5,\r\n                pointHoverRadius: 10\r\n            },\r\n        ],\r\n    };\r\n\r\n    const oneRandomData = () => {\r\n        const options = {\r\n            method: \"POST\",\r\n            url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?random=1`,\r\n            withCredentials: true\r\n        }\r\n        axios(options)\r\n    }\r\n\r\n    const [isClicked] = useState(false);\r\n    const [intervalId] = useState()\r\n\r\n    useEffect(() => {\r\n        if (isClicked) {\r\n            const intervalId = setInterval(() => oneRandomData(), 1000);\r\n        }\r\n        return () => clearInterval(intervalId)\r\n    })\r\n\r\n    // const postRandomData = () => {\r\n    //     oneRandomData();\r\n    //     setInterval(oneRandomData, 5000);\r\n    // }\r\n\r\n    return (\r\n        <div className=\"container chart-container\">\r\n            <button className=\"btn random-btn\" onClick={postRandomData}>Random Data</button>\r\n            <Line options={options} data={dataToPlot} />\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}