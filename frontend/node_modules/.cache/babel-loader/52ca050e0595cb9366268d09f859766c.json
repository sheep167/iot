{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marcyiu\\\\PycharmProjects\\\\iot\\\\frontend\\\\my-app\\\\src\\\\Pages\\\\Private\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, TimeScale, TimeSeriesScale } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport \"chartjs-adapter-moment\";\nimport ChartStreaming from \"chartjs-plugin-streaming\";\nimport 'chartjs-adapter-luxon';\nimport StreamingPlugin from 'chartjs-plugin-streaming';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport { RealTimeScale } from 'chartjs-plugin-streaming';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n\n  ChartJS.register(StreamingPlugin, CategoryScale, TimeScale, TimeSeriesScale, RealTimeScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n  const [searchParams] = useSearchParams();\n  const [data, setData] = useState([[], []]);\n\n  const getTelemetry = () => {\n    const options = {\n      method: \"GET\",\n      url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?sort=-1`,\n      withCredentials: true\n    };\n    axios(options).then(r => {\n      let temp = r.data.data.map(x => ({\n        'x': x.ts,\n        'y': x.telemetry.temp\n      }));\n      let hum = r.data.data.map(x => ({\n        'x': x.ts,\n        'y': x.telemetry.hum\n      }));\n      setData([temp, hum]);\n    });\n  };\n\n  useEffect(() => {\n    getTelemetry();\n    const intervalId = setInterval(() => getTelemetry(), 1000);\n    return () => clearInterval(intervalId);\n  }, []);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Temp and Hum',\n        color: '#000000',\n        font: {\n          size: 30\n        }\n      }\n    },\n    scales: {\n      y: {\n        grid: {\n          color: '#A7ADAF'\n        },\n        ticks: {\n          color: '#00000'\n        }\n      },\n      x: {\n        grid: {\n          color: '#A7ADAF'\n        },\n        ticks: {\n          color: '#00000'\n        } // type: 'realtime',\n        // realtime: {\n        //     onRefresh: chart => {\n        //         chart.data.datasets.forEach(dataset => {\n        //             dataset.data.push({\n        //               x: Date.now(),\n        //               y: Math.random()\n        //             })\n        //         })\n        //     }\n        // }\n        // time: {\n        //     unit: 'second',\n        //     stepSize: 30,\n        // },\n        // min: Date.now() - 3 * 60 * 1000\n\n      }\n    }\n  };\n  const dataToPlot = {\n    datasets: [{\n      label: 'Temperature',\n      data: data[0],\n      borderColor: '#ED1233',\n      backgroundColor: '#ED1233',\n      lineTension: 0.3,\n      pointRadius: 5,\n      pointHoverRadius: 10\n    }, {\n      label: 'Humidity',\n      data: data[1],\n      borderColor: '#0218FD',\n      backgroundColor: '#0218FD',\n      lineTension: 0.3,\n      pointRadius: 5,\n      pointHoverRadius: 10\n    }]\n  };\n\n  const oneRandomData = () => {\n    const options = {\n      method: \"POST\",\n      url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?random=1`,\n      withCredentials: true\n    };\n    axios(options);\n  };\n\n  const [isSendingRandom, setIsSedningRandom] = useState(false);\n  let sendingRandomId;\n  useEffect(() => {\n    oneRandomData();\n\n    if (isSendingRandom) {\n      sendingRandomId = setInterval(oneRandomData, 5000);\n    }\n\n    return () => clearInterval(sendingRandomId);\n  }, [isSendingRandom]);\n  return (\n    /*#__PURE__*/\n    // <div className=\"container chart-container\">\n    //     <button className=\"btn random-btn\" onClick={() => setIsSedningRandom(true)}>Random Data</button>\n    //     <Line options={options} data={dataToPlot}/>\n    // </div>\n    _jsxDEV(Line, {\n      data: {\n        datasets: [{\n          label: 'Dataset 1',\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\n          borderColor: 'rgb(255, 99, 132)',\n          borderDash: [8, 4],\n          fill: true,\n          data: []\n        }, {\n          label: 'Dataset 2',\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgb(54, 162, 235)',\n          cubicInterpolationMode: 'monotone',\n          fill: true,\n          data: []\n        }]\n      },\n      options: {\n        scales: {\n          x: {\n            type: 'realtime',\n            realtime: {\n              delay: 2000,\n              onRefresh: chart => {\n                chart.data.datasets.forEach(dataset => {\n                  dataset.data.push({\n                    x: Date.now(),\n                    y: Math.random()\n                  });\n                });\n              }\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(Dashboard, \"873ouMz72i3ruvWlf0gRLj+3gb4=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/marcyiu/PycharmProjects/iot/frontend/my-app/src/Pages/Private/Dashboard.js"],"names":["React","useEffect","useState","useSearchParams","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","TimeScale","TimeSeriesScale","Line","ChartStreaming","StreamingPlugin","axios","RealTimeScale","Dashboard","register","searchParams","data","setData","getTelemetry","options","method","url","get","withCredentials","then","r","temp","map","x","ts","telemetry","hum","intervalId","setInterval","clearInterval","responsive","plugins","legend","position","title","display","text","color","font","size","scales","y","grid","ticks","dataToPlot","datasets","label","borderColor","backgroundColor","lineTension","pointRadius","pointHoverRadius","oneRandomData","isSendingRandom","setIsSedningRandom","sendingRandomId","borderDash","fill","cubicInterpolationMode","type","realtime","delay","onRefresh","chart","forEach","dataset","push","Date","now","Math","random"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport {\r\n    Chart as ChartJS,\r\n    CategoryScale,\r\n    LinearScale,\r\n    PointElement,\r\n    LineElement,\r\n    Title,\r\n    Tooltip,\r\n    Legend,\r\n    TimeScale,\r\n    TimeSeriesScale\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport \"chartjs-adapter-moment\";\r\nimport ChartStreaming from \"chartjs-plugin-streaming\"\r\nimport 'chartjs-adapter-luxon';\r\nimport StreamingPlugin from 'chartjs-plugin-streaming';\r\nimport axios from 'axios';\r\nimport './Dashboard.css'\r\nimport { RealTimeScale } from 'chartjs-plugin-streaming';\r\n  \r\nexport const Dashboard = () => {\r\n    ChartJS.register(\r\n        StreamingPlugin,\r\n        CategoryScale,\r\n        TimeScale,\r\n        TimeSeriesScale,\r\n        RealTimeScale,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend\r\n    );\r\n       \r\n\r\n    const [searchParams] = useSearchParams();\r\n    const [data, setData] = useState([[], []]);\r\n\r\n\r\n    const getTelemetry = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?sort=-1`,\r\n            withCredentials: true\r\n        }\r\n        axios(options)\r\n        .then(r => {\r\n            let temp = r.data.data.map(x => ({ 'x': x.ts, 'y': x.telemetry.temp }));\r\n            let hum = r.data.data.map(x => ({ 'x': x.ts, 'y': x.telemetry.hum }));\r\n            setData([temp, hum]);\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getTelemetry();\r\n        const intervalId = setInterval(() => getTelemetry(), 1000);\r\n        return () => clearInterval(intervalId)\r\n    }, [])\r\n\r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n            legend: {\r\n                position: 'top',\r\n            },\r\n            title: {\r\n                display: true,\r\n                text: 'Temp and Hum',\r\n                color: '#000000',\r\n                font: {\r\n                    size: 30\r\n                }\r\n            },\r\n        },\r\n        scales: {\r\n            y: {\r\n                grid: {\r\n                    color: '#A7ADAF'\r\n                },\r\n                ticks: {\r\n                    color: '#00000'\r\n                }\r\n            },\r\n            x: {\r\n                grid: {\r\n                    color: '#A7ADAF'\r\n                },\r\n                ticks: {\r\n                    color: '#00000'\r\n                },\r\n                // type: 'realtime',\r\n                // realtime: {\r\n                //     onRefresh: chart => {\r\n                //         chart.data.datasets.forEach(dataset => {\r\n                //             dataset.data.push({\r\n                //               x: Date.now(),\r\n                //               y: Math.random()\r\n                //             })\r\n                //         })\r\n                //     }\r\n                // }\r\n                // time: {\r\n                //     unit: 'second',\r\n                //     stepSize: 30,\r\n                // },\r\n                // min: Date.now() - 3 * 60 * 1000\r\n            }\r\n        }\r\n  \r\n    };\r\n\r\n    const dataToPlot = {\r\n        datasets: [\r\n            {\r\n                label: 'Temperature',\r\n                data: data[0],\r\n                borderColor: '#ED1233',\r\n                backgroundColor: '#ED1233',\r\n                lineTension: 0.3,\r\n                pointRadius: 5,\r\n                pointHoverRadius: 10\r\n            },\r\n            {\r\n                label: 'Humidity',\r\n                data: data[1],\r\n                borderColor: '#0218FD',\r\n                backgroundColor: '#0218FD',\r\n                lineTension: 0.3,\r\n                pointRadius: 5,\r\n                pointHoverRadius: 10\r\n            },\r\n        ],\r\n    };\r\n\r\n    const oneRandomData = () => {\r\n        const options = {\r\n            method: \"POST\",\r\n            url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry?random=1`,\r\n            withCredentials: true\r\n        }\r\n        axios(options)\r\n    }\r\n\r\n    const [isSendingRandom, setIsSedningRandom] = useState(false);\r\n    let sendingRandomId;\r\n    useEffect(() => {\r\n        oneRandomData();\r\n        if (isSendingRandom) {\r\n            sendingRandomId = setInterval(oneRandomData, 5000);\r\n        }\r\n        return (() => clearInterval(sendingRandomId))\r\n    }, [isSendingRandom])\r\n\r\n    return (\r\n        // <div className=\"container chart-container\">\r\n        //     <button className=\"btn random-btn\" onClick={() => setIsSedningRandom(true)}>Random Data</button>\r\n        //     <Line options={options} data={dataToPlot}/>\r\n        // </div>\r\n        <Line\r\n        data={{\r\n          datasets: [{\r\n            label: 'Dataset 1',\r\n            backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n            borderColor: 'rgb(255, 99, 132)',\r\n            borderDash: [8, 4],\r\n            fill: true,\r\n            data: []\r\n          }, {\r\n            label: 'Dataset 2',\r\n            backgroundColor: 'rgba(54, 162, 235, 0.5)',\r\n            borderColor: 'rgb(54, 162, 235)',\r\n            cubicInterpolationMode: 'monotone',\r\n            fill: true,\r\n            data: []\r\n          }]\r\n        }}\r\n        options={{\r\n          scales: {\r\n            x: {\r\n              type: 'realtime',\r\n              realtime: {\r\n                delay: 2000,\r\n                onRefresh: chart => {\r\n                  chart.data.datasets.forEach(dataset => {\r\n                    dataset.data.push({\r\n                      x: Date.now(),\r\n                      y: Math.random()\r\n                    });\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }}\r\n      />\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}