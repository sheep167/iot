{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marcyiu\\\\PycharmProjects\\\\iot\\\\frontend\\\\my-app\\\\src\\\\Pages\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Dashboard = () => {\n  _s();\n\n  ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      }\n    }\n  };\n  const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Dataset 1',\n      data: [12, 21, 31, 23, 16, 18, 20],\n      borderColor: 'rgb(255, 99, 132)',\n      backgroundColor: 'rgba(255, 99, 132, 0.5)'\n    }, {\n      label: 'Dataset 2',\n      data: [21, 21, 20, 30, 25, 18],\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)'\n    }]\n  };\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const getTelemetry = () => {\n    const options = {\n      method: \"GET\",\n      url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry`,\n      withCredentials: true\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [searchParams.get(\"id\"), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getTelemetry,\n      children: \"22222\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"/eCs5CB4FLGAVLeprHBYLwBGf/Q=\", false, function () {\n  return [useSearchParams];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/marcyiu/PycharmProjects/iot/frontend/my-app/src/Pages/Dashboard.js"],"names":["React","useSearchParams","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","axios","Dashboard","register","options","responsive","plugins","legend","position","title","display","text","labels","data","datasets","label","borderColor","backgroundColor","searchParams","setSearchParams","getTelemetry","method","url","get","withCredentials"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SACEC,KAAK,IAAIC,OADX,EAEEC,aAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,KANF,EAOEC,OAPF,EAQEC,MARF,QASO,UATP;AAUA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3BV,EAAAA,OAAO,CAACW,QAAR,CACIV,aADJ,EAEIC,WAFJ,EAGIC,YAHJ,EAIIC,WAJJ,EAKIC,KALJ,EAMIC,OANJ,EAOIC,MAPJ;AAUA,QAAMK,OAAO,GAAG;AACZC,IAAAA,UAAU,EAAE,IADA;AAEZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ,OADD;AAIPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,IAAI,EAAE;AAFD;AAJA;AAFG,GAAhB;AAaA,QAAMC,MAAM,GAAG,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EAAyD,MAAzD,CAAf;AAEA,QAAMC,IAAI,GAAG;AACXD,IAAAA,MADW;AAEXE,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,WADT;AAEEF,MAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAQ,EAAR,EAAY,EAAZ,EAAgB,EAAhB,EAAoB,EAApB,EAAuB,EAAvB,CAFR;AAGEG,MAAAA,WAAW,EAAE,mBAHf;AAIEC,MAAAA,eAAe,EAAE;AAJnB,KADQ,EAOR;AACEF,MAAAA,KAAK,EAAE,WADT;AAEEF,MAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAFR;AAGEG,MAAAA,WAAW,EAAE,mBAHf;AAIEC,MAAAA,eAAe,EAAE;AAJnB,KAPQ;AAFC,GAAb;AAkBA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkC7B,eAAe,EAAvD;;AAEA,QAAM8B,YAAY,GAAG,MAAM;AACvB,UAAMhB,OAAO,GAAG;AACZiB,MAAAA,MAAM,EAAE,KADI;AAEZC,MAAAA,GAAG,EAAG,uCAAsCJ,YAAY,CAACK,GAAb,CAAiB,IAAjB,CAAuB,YAFvD;AAGZC,MAAAA,eAAe,EAAE;AAHL,KAAhB;AAKH,GAND;;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,eACKN,YAAY,CAACK,GAAb,CAAiB,IAAjB,CADL,eAEI;AAAQ,MAAA,OAAO,EAAEH,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA7DM;;GAAMlB,S;UA4C+BZ,e;;;KA5C/BY,S","sourcesContent":["import React from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n  \r\nexport const Dashboard = () => {\r\n    ChartJS.register(\r\n        CategoryScale,\r\n        LinearScale,\r\n        PointElement,\r\n        LineElement,\r\n        Title,\r\n        Tooltip,\r\n        Legend\r\n    );\r\n    \r\n    const options = {\r\n        responsive: true,\r\n        plugins: {\r\n          legend: {\r\n            position: 'top',\r\n          },\r\n          title: {\r\n            display: true,\r\n            text: 'Chart.js Line Chart',\r\n          },\r\n        },\r\n    };\r\n    \r\n    const labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July'];\r\n    \r\n    const data = {\r\n      labels,\r\n      datasets: [\r\n        {\r\n          label: 'Dataset 1',\r\n          data: [12, 21,31, 23, 16, 18,20],\r\n          borderColor: 'rgb(255, 99, 132)',\r\n          backgroundColor: 'rgba(255, 99, 132, 0.5)',\r\n        },\r\n        {\r\n          label: 'Dataset 2',\r\n          data: [21, 21, 20, 30, 25, 18],\r\n          borderColor: 'rgb(53, 162, 235)',\r\n          backgroundColor: 'rgba(53, 162, 235, 0.5)',\r\n        },\r\n      ],\r\n    };\r\n\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n    const getTelemetry = () => {\r\n        const options = {\r\n            method: \"GET\",\r\n            url: `http://localhost:5000/api/v1/device/${searchParams.get(\"id\")}/telemetry`,\r\n            withCredentials: true\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {searchParams.get(\"id\")}\r\n            <button onClick={getTelemetry}>22222</button>\r\n            {/* <Line options={options} data={data} /> */}\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}